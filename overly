#!/bin/bash

# Do not use "/" at the end
cache=("chrome-cache" "$HOME/.cache/google-chrome")
profile=("chrome-profile" "$HOME/.config/google-chrome/Default")

tmp_dir="/tmp/overlay-cache"

function echo_info {
	original_path="$2/"
	data_path="$2-data/" 
	tmp_path="$tmp_dir/$1/"
	work_path="$tmp_dir/$1-work/"

	echo "========================="
	echo "name: $1" 
	echo "endpoint: $original_path"
	echo "data: $data_path"
	echo "tmp: $tmp_path"
	echo "work: $work_path"
	echo "========================="
}

function omount {
	# 1 arg - name
	# 2 arg - original path
	local -n arr=$1
	name=${arr[0]}
	path=${arr[1]}

	original_path="$path/"
	data_path="$path-data/" 
	tmp_path="$tmp_dir/$name/"
	work_path="$tmp_dir/$name-work/"
	is_mount=`findmnt $original_path`

	if [[ -z $is_mount ]]; then
		echo_info $name $path
		if [[ ! -d $data_path ]]; then
			echo "chrome cache move to $data_path"
			mv -vn $original_path $data_path
			#mkdir -p $data_path
		fi
		
		echo "Mount $name $path..."
		rm -rf $original_path
		rm -rf $tmp_path
		mkdir -p $original_path
		mkdir -p $tmp_path
		mkdir -p $work_path
		sudo mount -t overlay overlay -o lowerdir=$data_path,upperdir=$tmp_path,workdir=$work_path $original_path
		echo "$1 mount success"
	else 
		echo "Already mounted $name $path"
	fi
}

function check_mount {
	if [[ -z `findmnt $2` ]]; then
		echo "$1 - not mount"
		return
	else 
		return 1
	fi
}

function oumount {
	local -n arr=$1
	name=${arr[0]}
	path=${arr[1]}
	check_mount $name $path
	local res=$?
	if [[ $res == 1 ]]; then 
		echo "umount $path"
		sudo umount $path
	fi
}

function sync {
	local -n arr=$1
	name=${arr[0]}
	path=${arr[1]}
	check_mount $name $path 
	local res=$?
	if [[ $res == 1 ]]; then 
		echo
		echo "sync $path"
		rsync -aXh --info=progress2 --delete-after --inplace --no-whole-file "$path/" "$path-data/" 
	fi
}

function info {
	local -n arr=$1
	name=${arr[0]}
	path=${arr[1]}
	check_mount $name $path
	local res=$?
	if [[ $res == 1 ]]; then  
		size=`du -s "$path" | awk '{print $1}'`
		size_data=`du -s "$path-data" | awk '{print $1}'`
		echo "$name mem usage: $(( ($size_data-$size)/1024 ))mb"
	fi 
}

if [[ $1 == "mount" ]]; then
	omount profile
	omount cache
fi

if [[ $1 == "umount" ]]; then
	oumount profile
	oumount cache
fi

if [[ $1 == "sync" ]]; then
	sync profile
	sync cache
fi

if [[ $1 == "info" ]]; then
	info profile
	info cache
fi

if [[ $1 == "echo" ]]; then
	echo_info ${profile[0]} ${profile[1]}
	echo_info ${cache[0]} ${cache[1]}
fi

if [[ -z $1 ]]; then
	echo "usage: overly [ mount | umount | sync | info ]"
fi
